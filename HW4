// -----------1. Установить какие методы массивов изменяют начальное значение массива
// Установить какие методы массивов изменяют начальное значение массива

	// Дан массив: 
    // const arr = [1, 2, 3, 'a', 'b', 'c']

// Методы:

// arr.at()           возвращает элемент под индексом
// console.log(arr.at(0)); // 1


//arr.push()          добавляет новый элемент в конец массива и меняет его длину
// console.log(arr.push(1));  // 7
// console.log(arr); // [1, 2, 3, 'a', 'b', 'c', 1]


// arr.unshift()      добавляет новый элемент в начало массива меняя его длину
// console.log(arr.unshift('Q'));
// console.log(arr);    // ['Q', 1, 2, 3, 'a', 'b', 'c']


// arr.pop()          удаляет последний элемент массива
// console.log(arr.pop());  // c
// console.log(arr);        // [1, 2, 3, 'a', 'b']


// arr.shift()      удаляет первый элемент массива
// console.log(arr.shift());  // 1
// console.log(arr);        // [2, 3, 'a', 'b', 'c']


// arr.split()        разбивает строку и создает массив
// console.log(arr.split(''));  // [1, 2, 3, 'a', 'b', 'c']
// console.log(arr);        // [1, 2, 3, 'a', 'b', 'c']


// arr.join()	        соединяет массив в строку
// console.log(arr.join(''));  // 123abc
// console.log(arr);        // [1, 2, 3, 'a', 'b', 'c']


// arr.indexOf()        ищет значение элемента и возвращает его позицию
// const fruits = ["Apple", "Orange", "Apple", "Mango"];
// let position = fruits.indexOf("Apple") + 1;   //1  +1 т.к. Позиция элемента всегда больше на 1 индекса.


// arr.lastIndexOf() ищет значение элемента и возвращает его позицию
// console.log(arr.lastIndexOf("Apple"));  // 2
// console.log(arr);       // [1, 2, 3, 'a', 'b', 'c']

// arr.includes()        проверять, присутствует ли элемент в массиве (включая NaN)
// const fruits = ["Banana", "Orange", "Apple", "Mango"];
// fruits.includes("Mango"); // is true


// arr.flat()            Создает новый массив с элементами подмассива, объединенными на указанной глубине. 
// const myArr = [[1,2],[3,4],[5,6]];
// const newArr = myArr.flat();    
// console.log(newArr);   //[ 1, 2, 3, 4, 5, 6 ]


// arr.concat()         создает новый массив путем слияния (конкатенации) существующих массивов
// const myGirls = ["Cecilie", "Lone"];
// const myBoys = ["Emil", "Tobias", "Linus"];
// const myChildren = myGirls.concat(myBoys);
// console.log(myChildren);    // [Cecilie,Lone,Emil,Tobias,Linus]


// arr.reverse()           выведет наоборот
// const fruits = ["Banana", "Orange", "Apple", "Mango"];
// fruits.reverse();
// console.log(fruits);  // [Mango,Apple,Orange,Banana]


// arr.slice()              вырезает часть массива в новый массив
// const fruits = ["Banana", "Orange", "Lemon", "Apple", "Mango"];
// const citrus = fruits.slice(1);  // начиная с индекса 1
// console.log(citrus);     // [Orange,Lemon,Apple,Mango]


// arr.splice()             можно использовать для добавления новых элементов в массив
// const fruits = ["Banana", "Orange", "Apple", "Mango"];
// fruits.splice(2, 0, "Lemon", "Kiwi");
// console.log(fruits);     // [Banana,Orange,Lemon,Kiwi,Apple,Mango]


// arr.copyWithin()   копирует элементы массива в другую позицию массива
// const fruits = ["Banana", "Orange", "Apple", "Mango"];
// fruits.copyWithin(2, 0);
// console.log(fruits);     // [Banana,Orange,Banana,Orange]


// arr.delete()   удаляет конкретный элемент по индексу 
// const fruits = ["Banana", "Orange", "Apple", "Mango"];
// fruits.delete(2);
// console.log(fruits);     // [Banana,Orange,Mango]



// 2. ----------У вас есть массив со скобками. Количество элементов и последовательность может быть разной.
// Нужно выяснить, у каждой ли скобки есть соответствующая пара (открывающая и закрывающая).
// Решение должно работать для всех массивов внизу.

// Первая последовательность: [ ‘(‘, ‘)’, ‘(‘, ‘)’, ‘)’]
// Вторая последовательность:  ['(', ')', '(', ')', '{', '(', '}', ')', 2, 'a']
// Еще: ['(', ')', '(', '(', '(', ')', '}', '(', ')', ')']




//3. Найти самое маленькое число из массива [4, 81, 3, -12, 99, 14]
// const arr = [4, 81, 3, -12, 99, 14];

// let min = arr[0];
// for (let i = 0; i < arr.length; i++) {
//   if (arr[i] < min) {
//     min = arr[i];
//   }
// }
// console.log(min);   // -12


//4. Найти самое большое число из массива [4, 81, 3, -12, 99, 14]
// const arr1 = [4, 81, 3, -12, 99, 14];
// console.log(arr1);

// let max = arr1[0];
// for (let i = 0; i < arr1.length; i++) {
//   if (arr1[i] > max) {
//     max = arr1[i];
//   }
// }
// console.log(max);

//5. Найти сумму всех элементов массива [[1, 2], [3, 4, 5], [6, 7, 8]]
// const arr2 = [[1, 2], [3, 4, 5], [6, 7, 8]];

// let sum = 0;
// for (let i = 0; i < arr2.length; i++) {
//   for (let j = 0; j < arr2[i].length; j++) {
//     sum += arr2[i][j];
//   }
// }
// console.log(sum); // 36


// 6. Циклы. При помощи цикла for выведите чётные числа от 2 до 10
// for (let i = 2; i <= 10; i++) {
//   if (i % 2 == 0) {
//     console.log(i);
//   }
// };


// 7. Переделайте задачку с улиткой используя циклы
// Улитка ползёт вверх по стене высотой 5 метров. Каждый день она проползает вверх на 3 метра, а каждую ночь съезжает вниз на 2 метра. За сколько дней она доползет до вершины стены.

// let wall = 5; 
// let oneDay = 3; 
// let oneNight = -2; 
// let distance = 0; 
// let countDays = 0; 


// while ((distance += oneDay) <= wall) {   // в () возьми переменную и добавиь к ней то что она проползла за день.
// 											//сравни то что она поползла с <= стеной, если меньше или равно, то продолжай цикл
// countDays++;								// здесь добавляем день
// console.log('День', countDays, 'Улитка прошла', distance, 'м');

// if (distance == wall) {					// если улитка достигла вершины, то все конец
//     console.log('Улитка достигла вершины за', countDays, 'дня');
// }
// else {
//     console.log(`Не сдавайся`);			// если не достигла вершины, то продолжай
// }
// distance += oneNight;					// наступила ночь и за ночь она сползла вниз 3 + -2 = 1
// }


/* ----- 8. Нарисуйте ромб (подсказка: вложенные циклы)

  *
 ***
*****
 ***
  *
*/

// const n = 3; // Высота ромба (количество строк в верхней части)

// // Верхняя часть ромба
// for (let i = 1; i <= n; i++) {
//     let row = '';
//     // Добавляем пробелы перед звездочками
//     for (let j = 1; j <= n - i; j++) {
//         row += ' ';
//     }
//     // Добавляем звездочки
//     for (let k = 1; k <= 2 * i - 1; k++) {
//         row += '*';
//     }
//     console.log(row);
// }

// // Нижняя часть ромба
// for (let i = n - 1; i >= 1; i--) {
//     let row = '';
//     // Добавляем пробелы перед звездочками
//     for (let j = 1; j <= n - i; j++) {
//         row += ' ';
//     }
//     // Добавляем звездочки
//     for (let k = 1; k <= 2 * i - 1; k++) {
//         row += '*';
//     }
//     console.log(row);
// }




/* -----9. Нарисуйте прямоугольный треугольник

*
* * *
* * * * *
* * * * * * *
* * * * * * * * *
*/

// const height = 5; // Высота треугольника

// for (let i = 1; i <= height; i++) {
//     let row = '';
//     // Добавляем звездочки
//     for (let j = 1; j <= 2 * i - 1; j++) {
//         row += '* ';
//     }
//     console.log(row);
// }


/*------- 10. Нарисуйте треугольник с цифрами - лево
0 1 2 3 4 5 6 7 8 9
0 1 2 3 4 5 6 7 8
0 1 2 3 4 5 6 7
0 1 2 3 4 5 6
0 1 2 3 4 5
0 1 2 3 4
0 1 2 3
0 1 2
0 1
0
*/

// const height = 10; // Высота треугольника

// for (let i = height; i >= 1; i--) {
//     let row = '';  // пробелы для выравнивания краю
//     // Добавляем цифры от 0 до i-1
//     for (let j = 0; j < i; j++) {
//         row += j + ' ';
//     }
//     console.log(row);
// }


/* -------- 11.Нарисуйте треугольник с цифрами - право

0 1 2 3 4 5 6 7 8 9
 0 1 2 3 4 5 6 7 8
   0 1 2 3 4 5 6 7
     0 1 2 3 4 5 6
       0 1 2 3 4 5
         0 1 2 3 4
           0 1 2 3
             0 1 2
               0 1
                 0

*/

// const height = 10; // Высота треугольника

// for (let i = height; i >= 1; i--) {
//     let row = '';     // пробелы для выравнивания краю
//     for (let j = 0; j < height - i; j++) {
//         row += '  '; // Два пробела для выравнивания
//     }
//     // Добавляем цифры от 0 до i-1
//     for (let k = 0; k < i; k++) {
//         row += k + ' ';
//     }
//     console.log(row);
// }

//Есть код. Какой будет результат этого кода и почему

//    const numbers = [1, 2, 3, 4, 5];
// let sum = 0;


// for (let i = 0; i < numbers.length; i++) {
//           if (i % 2 !== 0) {
//                sum += numbers[i];
//            }
// }
// console.log(sum);  // 6  = 2 + 4   2 и 4 нечетные индексы которые суммирутся в коде
